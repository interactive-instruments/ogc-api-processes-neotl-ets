import '../../../shared/Assertions.neotl'
import "../4_Processes/Processes-tcs.neotl"
import "Actions.neotl"


TestCase "Check for an echo process" {
    // /conf/core/job-creation-op
    id: jobs.echo
    description: "Check that an echo process with the id 'echo' or 'EchoProcess' exists"
    references:
    - "Processes /processes"
        "https://docs.ogc.org/DRAFTS/18-062.html#_jobs"
        AbstractTestCase

    ValidationStep "Extract EchoProcess ID" {
        id: extract
        description: "Check that an echo process with the id 'echo' or 'EchoProcess' exists"

        given:
            - Response from process.list.encoding.json

        when: Extractor extractors.echo.id executed

        then:
            - Assertion echoId.extracted must pass
    }
}

TestCase "Request the process description of the the echo process" {
    id: jobs.echo.description
    description: "Check that the echo process description can be retrieved"
    references:
    - "Processes /processes"
        "https://docs.ogc.org/DRAFTS/18-062.html#_jobs"
        AbstractTestCase

    ValidationStep "Request EchoProcess description" {
        id: request
        description: "Check that the echo process description can be retrieved"

        given:
            - Value ${echoId} from jobs.echo.extract

        when: Request requestGetProcessDescription executed

        then:
            - Assert OpenAPI3 {
                schema 
                "${schemaUrl}/process.yaml"
                validates
            }
            - AssertionGroup assertions.json.success must pass
    }
}

TestCase "Execute the echo process" {
    // /conf/core/job-creation-request
    id: jobs.echo.execute
    description: "Execute the echo process and validate the reponse"
    references:
    - "Processes /processes"
        "https://docs.ogc.org/DRAFTS/18-062.html#_jobs"
        AbstractTestCase

    ValidationStep "Extract Inputs and Outputs" {
        id: inout.extract
        description: "Extract the input and output values from the Schema. 
            If available, default values are used otherwise simple values are generated for the data type."

        given:
            - Response from process.list.encoding.json
        
        when: Extractor extractors.inputoutputs executed

        then:
            - Assertion inputs.extracted must pass
            - Assertion outputs.extracted must pass
    }


    ValidationStep "Execute echo process respond-sync" {
        id: jobs.echo.execute.sync
        description: "Execute the echo process with the extracted echoId"

        given:
            - Value $echoId from jobs.echo.extract
            - Values $inputs, $outputs from jobs.echo.execute.inout.extract

        when:
            Request requests.echo executed with:
                - ${preferHeader} = "respond-sync"

        then:
            - Assert OpenAPI3 {
                schema 
                "${schemaUrl}/output.yaml"
                validates
            }
            - AssertionGroup assertions.json.success must pass
    }
}


TestCase "Invalid job identifier" {
    // /conf/core/job-results-failed
    id: jobs.results.failed
    description: "Validate that the job results for a failed job complies with the require structure and contents."
    references:
    - "Processes /processes"
        "https://docs.ogc.org/DRAFTS/18-062.html#_jobs"
        AbstractTestCase

    ValidationStep "Request invalid job identifier as JSON" {
        id: request.json
        description: "Request an invalid job identifier (JOB_ID_MUST_NOT_EXIST) and validate that the incomplete job complies with the require structure and contents."

        given:
            - ConformanceClass http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/json
        when:
            Request requests.job.results.json executed

        then:
            - Assert OpenAPI3 {
                schema 
                "${schemaUrl}/exception.yaml"
                validates
            }
            - Assertion assertions.processes.no.such.job.exception must pass
            - Assert HTTP { statusCode "404" }
            - Assert HTTP { contentType "application/json" }
    }

    ValidationStep "Request invalid job identifier as HTML" {
        id: request.html
        description: "Request an invalid job identifier (JOB_ID_MUST_NOT_EXIST) and validate that the incomplete job complies with the require structure and contents."

        given:
            - ConformanceClass http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/html
        when:
            Request requests.job.results.html executed

        then:
            - Assert HTTP { statusCode "404" }
            - Assert HTTP { contentType "text/html" }
    }
}


Assertion "Echo ID extracted" {
    id: echoId.extracted

    JSON {
        ${echoId} exists
        otherwise FAIL with "No echo ID could be extracted"
    }
}

Assertion "inputs extracted" {
    id: inputs.extracted

    JSON {
        ${inputs} exists
        otherwise FAIL with "No inputs defined in process definition"
    }
}

Assertion "Outputs extracted" {
    id: outputs.extracted

    JSON {
        ${outputs} exists
        otherwise FAIL with "No outputs defined in process definition"
    }
}